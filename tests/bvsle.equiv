((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvand x (bvor x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvor x (bvand x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvnot x) (bvnot y))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvand y (bvor x y)) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvor y (bvand x y)) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvneg (bvsub x (bvadd x x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvand x (bvor x (bvneg x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvor x (bvand x (bvneg x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvand x (bvadd x (bvnot x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvand x (bvor x (bvneg y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvor x (bvand x (bvneg y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvand x (bvor x (bvnot y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvor x (bvand x (bvnot y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvand x (bvor x (bvmul x x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvor x (bvand x (bvmul x x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvand x (bvor x (bvadd x x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvor x (bvand x (bvadd x x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvand x (bvor x (bvmul x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvor x (bvand x (bvmul x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvor x (bvand x (bvor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvand x (bvor x (bvand x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvor x (bvxor x (bvand x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvor x (bvsub x (bvand x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvand x (bvor x (bvxor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvor x (bvand x (bvxor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvand x (bvor x (bvadd x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvor x (bvand x (bvadd x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvand x (bvor x (bvsub x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvor x (bvand x (bvsub x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvand x (bvor x (bvsub y x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvor x (bvand x (bvsub y x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvand x (bvor x (bvmul y y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvor x (bvand x (bvmul y y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvand x (bvor x (bvadd y y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvor x (bvand x (bvadd y y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvand x (bvadd y (bvnot y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvor x (bvxor y (bvor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvand x (bvor y (bvxor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvor x (bvsub (bvor x y) y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvneg (bvsub y (bvadd y y))) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvand y (bvadd x (bvnot x))) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvor y (bvxor x (bvor x y))) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvand y (bvor x (bvxor x y))) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvand y (bvor y (bvneg x))) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvor y (bvand y (bvneg x))) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvand y (bvor y (bvnot x))) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvor y (bvand y (bvnot x))) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvand y (bvor y (bvneg y))) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvor y (bvand y (bvneg y))) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvand y (bvadd y (bvnot y))) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvand y (bvor y (bvmul x x))) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvor y (bvand y (bvmul x x))) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvand y (bvor y (bvadd x x))) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvor y (bvand y (bvadd x x))) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvand y (bvor y (bvmul x y))) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvor y (bvand y (bvmul x y))) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvor y (bvand y (bvor x y))) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvand y (bvor y (bvand x y))) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvor y (bvxor y (bvand x y))) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvor y (bvsub y (bvand x y))) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvand y (bvor y (bvxor x y))) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvor y (bvand y (bvxor x y))) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvand y (bvor y (bvadd x y))) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvor y (bvand y (bvadd x y))) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvand y (bvor y (bvsub x y))) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvor y (bvand y (bvsub x y))) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvand y (bvor y (bvsub y x))) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvor y (bvand y (bvsub y x))) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvand y (bvor y (bvmul y y))) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvor y (bvand y (bvmul y y))) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvand y (bvor y (bvadd y y))) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvor y (bvand y (bvadd y y))) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge (bvor y (bvsub (bvor x y) x)) x)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsge y (bvnot (bvadd x (bvnot (bvadd x x)))))))