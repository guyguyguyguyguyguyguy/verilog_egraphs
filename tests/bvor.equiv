((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvxor x y))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor y (bvxor x y))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvxor x (bvor x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvadd x (bvxor x (bvor x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvand y (bvnot x)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvand y (bvnot x)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvadd x (bvand y (bvnot x)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvand y (bvor x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvor y (bvand x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvxor y (bvand x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvxor y (bvand x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvadd x (bvxor y (bvand x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvsub y (bvand x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvsub y (bvand x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvadd x (bvsub y (bvand x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvor y (bvxor x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvand y (bvxor x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvand y (bvxor x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvadd x (bvand y (bvxor x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvsub (bvor x y) x))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvsub (bvor x y) x))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor y (bvand x (bvnot y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvand x (bvnot y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvadd y (bvand x (bvnot y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor y (bvand x (bvor x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor y (bvxor x (bvand x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvadd y (bvxor x (bvand x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor y (bvsub x (bvand x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvsub x (bvand x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor y (bvand x (bvxor x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvand x (bvxor x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvadd y (bvand x (bvxor x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor y (bvxor y (bvor x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvadd y (bvxor y (bvor x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor y (bvsub (bvor x y) y))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvsub (bvor x y) y))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor (bvand x y) (bvxor x y))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvadd (bvand x y) (bvxor x y))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvnot (bvxor x (bvor x (bvnot y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvnot (bvxor y (bvor y (bvnot x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvnot (bvand (bvnot x) (bvnot y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvnot (bvsub (bvor x (bvnot y)) x))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvnot (bvsub (bvor y (bvnot x)) y))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvnot (bvor x (bvnot y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvnot (bvor x (bvnot y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvadd x (bvnot (bvor x (bvnot y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvnot (bvxor x (bvnot y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvnot (bvxor y (bvnot x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvneg (bvsub y (bvadd y y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvadd x (bvxor x (bvor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvxor x (bvor x (bvxor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvadd x (bvxor x (bvor x (bvxor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvxor x (bvand y (bvnot x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvadd x (bvand y (bvnot x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvxor x (bvand y (bvor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvxor x (bvor y (bvand x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvxor x (bvxor y (bvand x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvadd x (bvxor y (bvand x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvxor x (bvsub y (bvand x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvadd x (bvsub y (bvand x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvxor x (bvor y (bvxor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvadd x (bvxor x (bvor y (bvxor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvxor x (bvand y (bvxor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvadd x (bvand y (bvxor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvxor x (bvsub (bvor x y) x)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvand y (bvnot (bvand x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvand y (bvnot (bvand x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvadd x (bvand y (bvnot (bvand x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvor y (bvand x (bvneg x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvxor y (bvand x (bvneg x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvand y (bvadd x (bvnot x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvor y (bvand x (bvneg y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvxor y (bvand x (bvneg y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvor y (bvand x (bvnot y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvxor y (bvand x (bvnot y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvadd y (bvand x (bvnot y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvor y (bvand x (bvmul x x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvxor y (bvand x (bvmul x x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvor y (bvand x (bvadd x x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvxor y (bvand x (bvadd x x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvor y (bvand x (bvmul x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvxor y (bvand x (bvmul x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvor y (bvand x (bvor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvxor y (bvand x (bvor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvor y (bvxor x (bvor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvand y (bvxor x (bvor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvand y (bvxor x (bvor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvadd x (bvand y (bvxor x (bvor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvxor y (bvor x (bvand x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvor y (bvxor x (bvand x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvadd y (bvxor x (bvand x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvor y (bvsub x (bvand x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvxor y (bvsub x (bvand x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvand y (bvor x (bvxor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvor y (bvand x (bvxor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvxor y (bvand x (bvxor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvadd y (bvand x (bvxor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvor y (bvand x (bvadd x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor x (bvxor y (bvand x (bvadd x y))))))