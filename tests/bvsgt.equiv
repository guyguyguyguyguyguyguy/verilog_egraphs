((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvand y (bvor x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvor y (bvand x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvnot y) (bvnot x))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvand x (bvor x y)) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvor x (bvand x y)) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvneg (bvsub y (bvadd y y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvand y (bvadd x (bvnot x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvor y (bvxor x (bvor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvand y (bvor x (bvxor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvand y (bvor y (bvneg x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvor y (bvand y (bvneg x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvand y (bvor y (bvnot x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvor y (bvand y (bvnot x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvand y (bvor y (bvneg y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvor y (bvand y (bvneg y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvand y (bvadd y (bvnot y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvand y (bvor y (bvmul x x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvor y (bvand y (bvmul x x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvand y (bvor y (bvadd x x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvor y (bvand y (bvadd x x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvand y (bvor y (bvmul x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvor y (bvand y (bvmul x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvor y (bvand y (bvor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvand y (bvor y (bvand x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvor y (bvxor y (bvand x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvor y (bvsub y (bvand x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvand y (bvor y (bvxor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvor y (bvand y (bvxor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvand y (bvor y (bvadd x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvor y (bvand y (bvadd x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvand y (bvor y (bvsub x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvor y (bvand y (bvsub x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvand y (bvor y (bvsub y x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvor y (bvand y (bvsub y x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvand y (bvor y (bvmul y y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvor y (bvand y (bvmul y y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvand y (bvor y (bvadd y y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvor y (bvand y (bvadd y y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvor y (bvsub (bvor x y) x)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvneg (bvsub x (bvadd x x))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvand x (bvor x (bvneg x))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvor x (bvand x (bvneg x))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvand x (bvadd x (bvnot x))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvand x (bvor x (bvneg y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvor x (bvand x (bvneg y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvand x (bvor x (bvnot y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvor x (bvand x (bvnot y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvand x (bvor x (bvmul x x))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvor x (bvand x (bvmul x x))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvand x (bvor x (bvadd x x))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvor x (bvand x (bvadd x x))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvand x (bvor x (bvmul x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvor x (bvand x (bvmul x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvor x (bvand x (bvor x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvand x (bvor x (bvand x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvor x (bvxor x (bvand x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvor x (bvsub x (bvand x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvand x (bvor x (bvxor x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvor x (bvand x (bvxor x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvand x (bvor x (bvadd x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvor x (bvand x (bvadd x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvand x (bvor x (bvsub x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvor x (bvand x (bvsub x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvand x (bvor x (bvsub y x))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvor x (bvand x (bvsub y x))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvand x (bvor x (bvmul y y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvor x (bvand x (bvmul y y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvand x (bvor x (bvadd y y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvor x (bvand x (bvadd y y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvand x (bvadd y (bvnot y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvor x (bvxor y (bvor x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvand x (bvor y (bvxor x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt (bvor x (bvsub (bvor x y) y)) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvnot (bvxor x (bvnot (bvxor x y)))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvnot (bvadd x (bvnot (bvadd x y)))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvnot (bvsub x (bvsub y (bvnot x)))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvsgt x (bvnot (bvadd y (bvnot (bvadd y y)))))))