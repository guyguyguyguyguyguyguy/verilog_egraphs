((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvsub x y))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvand y (bvor x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvor y (bvand x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvor y (bvsub x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvand y (bvsub x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvnot y) (bvnot x))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvnot y) (bvsub x y))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvnot (bvsub x y)) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvand x (bvor x y)) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvor x (bvand x y)) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvadd y (bvnot x)) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvnot (bvadd y (bvnot x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvneg (bvsub y (bvadd y y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvsub x (bvand y (bvor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvsub x (bvor y (bvand x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvsub x (bvor y (bvsub x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvsub x (bvand y (bvsub x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvadd x (bvsub y (bvadd y y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvand y (bvadd x (bvnot x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvor y (bvxor x (bvor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvand y (bvor x (bvxor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvand y (bvor x (bvsub x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvor y (bvand x (bvsub x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvand y (bvor y (bvneg x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvor y (bvand y (bvneg x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvand y (bvor y (bvnot x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvor y (bvand y (bvnot x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvand y (bvor y (bvneg y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvor y (bvand y (bvneg y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvand y (bvadd y (bvnot y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvand y (bvor y (bvmul x x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvor y (bvand y (bvmul x x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvand y (bvor y (bvadd x x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvor y (bvand y (bvadd x x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvand y (bvor y (bvmul x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvor y (bvand y (bvmul x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvor y (bvand y (bvor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvand y (bvor y (bvand x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvor y (bvxor y (bvand x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvor y (bvsub y (bvand x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvand y (bvor y (bvxor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvor y (bvand y (bvxor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvand y (bvor y (bvadd x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvor y (bvand y (bvadd x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvand y (bvor y (bvsub x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvor y (bvand y (bvsub x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvor y (bvxor y (bvsub x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvand y (bvor y (bvsub y x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvor y (bvand y (bvsub y x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvand y (bvor y (bvmul y y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvor y (bvand y (bvmul y y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvand y (bvor y (bvadd y y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvor y (bvand y (bvadd y y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvor y (bvsub (bvor x y) x)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvsub (bvnot y) (bvnot x)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvand (bvor x y) (bvsub x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvor (bvand x y) (bvsub x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvsub (bvand x (bvor x y)) y))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge x (bvsub (bvor x (bvand x y)) y))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvnot (bvsub x y)) (bvnot x))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvor x (bvnot y)) (bvsub x y))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvand x (bvnot y)) (bvsub x y))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvand x (bvor x y)) (bvsub x y))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvor x (bvand x y)) (bvsub x y))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvxor x (bvand x y)) (bvsub x y))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvsub x (bvand x y)) (bvsub x y))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvand x (bvxor x y)) (bvsub x y))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (let ((_let_1 (bvnot x))) (bvuge (bvadd y _let_1) _let_1))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvxor y (bvor x y)) (bvsub x y))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvsub (bvor x y) y) (bvsub x y))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvneg (bvsub x (bvadd x x))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvor x (bvnot (bvsub x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvand x (bvnot (bvsub x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvand x (bvor x (bvneg x))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvor x (bvand x (bvneg x))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvand x (bvadd x (bvnot x))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvand x (bvor x (bvneg y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvor x (bvand x (bvneg y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvand x (bvor x (bvnot y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvor x (bvand x (bvnot y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvand x (bvor x (bvmul x x))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvor x (bvand x (bvmul x x))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvand x (bvor x (bvadd x x))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvor x (bvand x (bvadd x x))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvand x (bvor x (bvmul x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvor x (bvand x (bvmul x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvor x (bvand x (bvor x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvand x (bvor x (bvand x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvor x (bvxor x (bvand x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvor x (bvsub x (bvand x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvand x (bvor x (bvxor x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvor x (bvand x (bvxor x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvand x (bvor x (bvadd x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvor x (bvand x (bvadd x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvand x (bvor x (bvsub x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvor x (bvand x (bvsub x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvxor x (bvand x (bvsub x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvsub x (bvand x (bvsub x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvuge (bvand x (bvxor x (bvsub x y))) y)))