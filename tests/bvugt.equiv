((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvsub y x) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvnot (bvsub y x)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvadd x (bvnot y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvand y (bvor x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvor y (bvand x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvnot y) (bvnot x))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvsub y x) (bvnot x))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvand x (bvor x y)) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvor x (bvand x y)) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvor x (bvsub y x)) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvand x (bvsub y x)) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvneg (bvsub y (bvadd y y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvor y (bvnot (bvsub y x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvand y (bvnot (bvsub y x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvand y (bvor x (bvneg x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvand y (bvadd x (bvnot x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvor y (bvadd x (bvnot y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvand y (bvadd x (bvnot y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvor y (bvxor x (bvor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvand y (bvor x (bvxor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvand y (bvor x (bvsub x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvand y (bvor y (bvneg x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvor y (bvand y (bvneg x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvand y (bvor y (bvnot x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvor y (bvand y (bvnot x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvand y (bvor y (bvneg y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvor y (bvand y (bvneg y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvand y (bvadd y (bvnot y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvand y (bvor y (bvmul x x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvor y (bvand y (bvmul x x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvand y (bvor y (bvadd x x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvor y (bvand y (bvadd x x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvand y (bvor y (bvmul x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvor y (bvand y (bvmul x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvor y (bvand y (bvor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvand y (bvor y (bvand x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvor y (bvxor y (bvand x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvor y (bvsub y (bvand x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvand y (bvor y (bvxor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvor y (bvand y (bvxor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvand y (bvor y (bvadd x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvor y (bvand y (bvadd x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvand y (bvor y (bvsub x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvor y (bvand y (bvsub x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvand y (bvor y (bvsub y x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvor y (bvand y (bvsub y x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvxor y (bvand y (bvsub y x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvsub y (bvand y (bvsub y x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvand y (bvxor y (bvsub y x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvand y (bvor y (bvmul y y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvor y (bvand y (bvmul y y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvand y (bvor y (bvadd y y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvor y (bvand y (bvadd y y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvor y (bvsub (bvor x y) x)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt x (bvsub (bvnot (bvneg x)) y))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvnot y) (bvnot (bvsub y x)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (let ((_let_1 (bvnot y))) (bvugt _let_1 (bvadd x _let_1)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvsub y x) (bvxor x (bvor x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvsub y x) (bvor y (bvnot x)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvsub y x) (bvand y (bvnot x)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvsub y x) (bvand y (bvor x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvsub y x) (bvor y (bvand x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvsub y x) (bvxor y (bvand x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvsub y x) (bvsub y (bvand x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvsub y x) (bvand y (bvxor x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvsub y x) (bvsub (bvor x y) x))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvnot (bvadd x (bvnot y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvneg (bvsub x (bvadd x x))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvand x (bvor x (bvneg x))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvor x (bvand x (bvneg x))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvand x (bvadd x (bvnot x))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvand x (bvor x (bvneg y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvor x (bvand x (bvneg y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvand x (bvor x (bvnot y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvor x (bvand x (bvnot y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvand x (bvor x (bvmul x x))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvor x (bvand x (bvmul x x))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvand x (bvor x (bvadd x x))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvor x (bvand x (bvadd x x))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvand x (bvor x (bvmul x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvor x (bvand x (bvmul x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvor x (bvand x (bvor x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvand x (bvor x (bvand x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvor x (bvxor x (bvand x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvor x (bvsub x (bvand x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvand x (bvor x (bvxor x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvor x (bvand x (bvxor x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvand x (bvor x (bvadd x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvor x (bvand x (bvadd x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvand x (bvor x (bvsub x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvor x (bvand x (bvsub x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvsub x (bvadd x (bvsub x y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvand x (bvor x (bvsub y x))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvor x (bvand x (bvsub y x))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvor x (bvxor x (bvsub y x))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvand x (bvor x (bvmul y y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvor x (bvand x (bvmul y y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvand x (bvor x (bvadd y y))) y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvugt (bvor x (bvand x (bvadd y y))) y)))