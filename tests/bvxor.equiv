((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x y)))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvnot (bvxor x (bvnot y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvnot (bvxor y (bvnot x)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvand y (bvor x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvor y (bvand x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvand x (bvor x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvor x (bvand x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor (bvnot x) (bvnot y))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor (bvor x y) (bvand x y))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvsub (bvor x y) (bvand x y))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvand (bvor x y) (bvxor x y))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvneg (bvsub y (bvadd y y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvand y (bvadd x (bvnot x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvor y (bvxor x (bvor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvand y (bvor x (bvxor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvand y (bvor y (bvneg x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvor y (bvand y (bvneg x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvand y (bvor y (bvnot x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvor y (bvand y (bvnot x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvand y (bvor y (bvneg y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvor y (bvand y (bvneg y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvand y (bvadd y (bvnot y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvand y (bvor y (bvmul x x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvor y (bvand y (bvmul x x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvand y (bvor y (bvadd x x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvor y (bvand y (bvadd x x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvand y (bvor y (bvmul x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvor y (bvand y (bvmul x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvor y (bvand y (bvor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvand y (bvor y (bvand x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvor y (bvxor y (bvand x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvor y (bvsub y (bvand x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvand y (bvor y (bvxor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvor y (bvand y (bvxor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvand y (bvor y (bvadd x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvor y (bvand y (bvadd x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvand y (bvor y (bvsub x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvor y (bvand y (bvsub x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvand y (bvor y (bvsub y x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvor y (bvand y (bvsub y x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvand y (bvor y (bvmul y y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvor y (bvand y (bvmul y y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvand y (bvor y (bvadd y y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvor y (bvand y (bvadd y y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor x (bvor y (bvsub (bvor x y) x)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvneg (bvsub x (bvadd x x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvand x (bvor x (bvneg x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvor x (bvand x (bvneg x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvand x (bvadd x (bvnot x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvand x (bvor x (bvneg y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvor x (bvand x (bvneg y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvand x (bvor x (bvnot y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvor x (bvand x (bvnot y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvand x (bvor x (bvmul x x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvor x (bvand x (bvmul x x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvand x (bvor x (bvadd x x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvor x (bvand x (bvadd x x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvand x (bvor x (bvmul x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvor x (bvand x (bvmul x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvor x (bvand x (bvor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvand x (bvor x (bvand x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvor x (bvxor x (bvand x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvor x (bvsub x (bvand x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvand x (bvor x (bvxor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvor x (bvand x (bvxor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvand x (bvor x (bvadd x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvor x (bvand x (bvadd x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvand x (bvor x (bvsub x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvor x (bvand x (bvsub x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvand x (bvor x (bvsub y x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvor x (bvand x (bvsub y x))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvand x (bvor x (bvmul y y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvor x (bvand x (bvmul y y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvand x (bvor x (bvadd y y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvor x (bvand x (bvadd y y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvand x (bvadd y (bvnot y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvor x (bvxor y (bvor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvand x (bvor y (bvxor x y))))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor y (bvor x (bvsub (bvor x y) y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvand (bvor x y) (bvnot (bvand x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor (bvand x y) (bvor x (bvxor x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvxor (bvand x y) (bvor y (bvxor x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvand (bvxor x y) (bvnot (bvand x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvand (bvxor x y) (bvadd x (bvnot x)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor (bvxor x y) (bvand x (bvnot y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor (bvxor x y) (bvxor x (bvor x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor (bvxor x y) (bvxor x (bvand x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor (bvxor x y) (bvsub x (bvand x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (let ((_let_1 (bvxor x y))) (bvand _let_1 (bvor x _let_1)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (let ((_let_1 (bvxor x y))) (bvor _let_1 (bvand x _let_1)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor (bvxor x y) (bvand y (bvnot x)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvand (bvxor x y) (bvadd y (bvnot y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor (bvxor x y) (bvxor y (bvor x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor (bvxor x y) (bvxor y (bvand x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor (bvxor x y) (bvsub y (bvand x y)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (let ((_let_1 (bvxor x y))) (bvand _let_1 (bvor y _let_1)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (let ((_let_1 (bvxor x y))) (bvor _let_1 (bvand y _let_1)))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor (bvxor x y) (bvsub (bvor x y) x))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvor (bvxor x y) (bvsub (bvor x y) y))))
((define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvsub (bvor x (bvxor x y)) (bvand x y))))