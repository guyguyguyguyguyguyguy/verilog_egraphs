(datatype Expr
	(Var String) 
    (Bool bool)
    (Not Expr)
    (And Expr Expr)
    (Or Expr Expr)
    (Eq Expr Expr))

(relation Root (Expr))
(relation True (Expr))
(relation False (Expr))

(Root ((Var "bvule") (Var "ALU_SRA") (Var "ALU_LTU")) )
(Root ((Var "bvule") (Var "ALU_LT") (Var "ALU_GE")) )
(Root ((Var "bvule") (Var "data_type_o") ((Var "bvneg") (Var "data_type_o"))) )
(Root (Eq (Var "IMM_B_S") ((Var "bvmul") (Var "IMM_B_S") (Var "IMM_B_S"))) )
(Root (Not (And (Var "div_en_o") (Var "illegal_insn_o"))) )
(Root ((Var "bvule") (Var "CSR_OP_WRITE") ((Var "bvneg") (Var "CSR_OP_WRITE"))) )
(Root (Not (Var "IMM_A_Z")) )
(Root ((Var "bvult") (Var "MD_OP_DIV") (Var "MD_OP_REM")) )
(Root ((Var "bvule") (Var "CSR_OP_READ") (Var "MD_OP_DIV")) )
(Root (Not (And (Var "csr_illegal") (Var "csr_pipe_flush_o"))) )
(Root (Not (And (Var "data_we_o") (Var "ecall_insn_o"))) )
(Root ((Var "bvule") (Var "ALU_OR") (Var "ALU_LT")) )
(Root (Not (And (Var "csr_pipe_flush_o") (Var "dret_insn_o"))) )
(Root (Eq (Var "RF_WD_CSR") ((Var "bvneg") (Var "RF_WD_CSR"))) )
(Root ((Var "bvule") (Var "MD_OP_MULH") (Var "RF_WD_CSR")) )
(Root ((Var "bvule") (Var "CSR_OP_READ") (Var "MD_OP_REM")) )
(Root ((Var "bvule") (Var "ALU_XOR") ((Var "bvmul") (Var "ALU_XOR") (Var "ALU_XOR"))) )
(Root (Eq (Var "OP_A_REG_A") ((Var "bvneg") (Var "OP_A_REG_A"))) )
(Root ((Var "bvule") (Var "RF_WD_LSU") (Var "MD_OP_MULH")) )
(Root ((Var "bvult") (Var "OPCODE_OP_IMM") ((Var "bvneg") (Var "OPCODE_OP_IMM"))) )
(Root ((Var "bvule") (Var "ALU_GE") (Var "ALU_EQ")) )
(Root (Eq (Var "MD_OP_DIV") ((Var "bvneg") (Var "MD_OP_DIV"))) )
(Root ((Var "bvule") (Var "IMM_B_B") ((Var "bvmul") (Var "IMM_B_B") (Var "IMM_B_B"))) )
(Root ((Var "bvule") (Var "ALU_SUB") (Var "ALU_AND")) )
(Root ((Var "bvule") (Var "MD_OP_MULL") (Var "csr_op")) )
(Root ((Var "bvule") (Var "OPCODE_AUIPC") (Var "OPCODE_BRANCH")) )
(Root ((Var "bvule") (Var "ALU_SUB") (Var "ALU_NE")) )
(Root (Eq (Var "MD_OP_DIV") (Var "OP_A_CURRPC")) )
(Root (Eq (Var "OP_A_REG_A") (Var "RF_WD_LSU")) )
(Root (Eq (Var "CSR_OP_READ") ((Var "bvneg") (Var "CSR_OP_READ"))) )
(Root ((Var "bvule") (Var "ALU_OR") (Var "ALU_GEU")) )
(Root ((Var "bvule") (Var "RF_WD_EX") ((Var "bvneg") (Var "RF_WD_EX"))) )
(Root ((Var "bvule") (Var "MD_OP_MULL") (Var "alu_op_a_mux_sel_o")) )
(Root (Eq (Var "MD_OP_MULL") ((Var "bvneg") (Var "MD_OP_MULL"))) )
(Root ((Var "bvule") (Var "ALU_EQ") ((Var "bvmul") (Var "ALU_EQ") (Var "ALU_EQ"))) )
(Root (Eq (Var "CSR_OP_SET") ((Var "bvneg") (Var "CSR_OP_SET"))) )
(Root ((Var "bvule") (Var "MD_OP_MULH") ((Var "bvneg") (Var "MD_OP_MULH"))) )
(Root (Var "IMM_A_ZERO") )
(Root ((Var "bvule") (Var "ALU_SRA") (Var "ALU_NE")) )
(Root ((Var "bvule") (Var "MD_OP_MULL") (Var "multdiv_operator_o")) )
(Root ((Var "bvule") (Var "imm_b_mux_sel_o") ((Var "bvneg") (Var "imm_b_mux_sel_o"))) )
(Root (Eq (Var "IMM_B_INCR_PC") ((Var "bvneg") (Var "IMM_B_INCR_PC"))) )
(Root (Var "OP_B_IMM") )
(Root ((Var "bvule") (Var "OPCODE_LOAD") ((Var "bvneg") (Var "OPCODE_LOAD"))) )
(Root ((Var "bvule") (Var "imm_u_type_o") (Var "instr_rdata_i")) )
(Root (Eq (Var "CSR_OP_WRITE") (Var "RF_WD_EX")) )
(Root ((Var "bvule") (Var "ALU_SRA") (Var "ALU_SLTU")) )
(Root (Eq (Var "CSR_OP_CLEAR") (Var "OP_A_IMM")) )
(Root ((Var "bvule") (Var "IMM_B_S") ((Var "bvneg") (Var "IMM_B_S"))) )
(Root ((Var "bvule") (Var "ALU_AND") ((Var "bvmul") (Var "ALU_AND") (Var "ALU_AND"))) )
(Root ((Var "bvule") (Var "RF_WD_LSU") ((Var "bvnot") (Var "RF_WD_LSU"))) )
(Root ((Var "bvule") (Var "ALU_SLL") (Var "ALU_NE")) )
(Root ((Var "bvule") (Var "MD_OP_MULL") (Var "CSR_OP_WRITE")) )
(Root (Not (Var "illegal_reg_rv32e")) )
(Root (Eq (Var "IMM_B_J") ((Var "bvneg") (Var "IMM_B_J"))) )
(Root ((Var "bvule") (Var "csr_op") (Var "CSR_OP_CLEAR")) )
(Root ((Var "bvule") (Var "ALU_SRL") (Var "ALU_GEU")) )
(Root (Not (Var "OP_B_REG_B")) )
(Root ((Var "bvult") (Var "CSR_OP_READ") (Var "CSR_OP_SET")) )
(Root ((Var "bvule") (Var "OP_A_REG_A") (Var "csr_op")) )
(Root ((Var "bvult") (Var "IMM_B_I") (Var "IMM_B_INCR_PC")) )
(Root ((Var "bvule") (Var "RV32E") (Var "instr_rdata_i")) )
(Root ((Var "bvule") (Var "IMM_B_U") ((Var "bvneg") (Var "IMM_B_U"))) )
(Root ((Var "bvule") (Var "OPCODE_BRANCH") (Var "OPCODE_JALR")) )
(Root ((Var "bvule") (Var "IMM_B_B") ((Var "bvneg") (Var "IMM_B_B"))) )
(Root (Eq (Var "ALU_SUB") ((Var "bvmul") (Var "ALU_SUB") (Var "ALU_SUB"))) )
(Root ((Var "bvule") (Var "OPCODE_LUI") ((Var "bvneg") (Var "OPCODE_LUI"))) )
(Root ((Var "bvule") (Var "ALU_SRL") (Var "ALU_GE")) )
(Root ((Var "bvule") (Var "ALU_SUB") (Var "ALU_SRL")) )
(Root (Eq (Var "MD_OP_DIV") (Var "RF_WD_CSR")) )
(Root (Eq (Var "regfile_we") (Var "regfile_we_o")) )
(Root ((Var "bvule") (Var "ALU_LTU") ((Var "bvmul") (Var "ALU_LTU") (Var "ALU_LTU"))) )
(Root ((Var "bvule") (Var "ALU_OR") ((Var "bvmul") (Var "ALU_OR") (Var "ALU_OR"))) )
(Root (Not (And (Var "csr_access_o") (Var "illegal_insn"))) )
(Root ((Var "bvule") (Var "OPCODE_OP_IMM") (Var "OPCODE_OP")) )
(Root ((Var "bvule") (Var "ALU_SLL") (Var "ALU_GEU")) )
(Root (Eq (Var "ALU_ADD") ((Var "bvneg") (Var "ALU_ADD"))) )
(Root ((Var "bvule") (Var "OPCODE_LOAD") (Var "OPCODE_OP")) )
(Root ((Var "bvule") (Var "ALU_NE") (Var "ALU_SLT")) )
(Root ((Var "bvule") (Var "ALU_SUB") (Var "ALU_GE")) )
(Root (Eq (Var "RF_WD_LSU") ((Var "bvneg") (Var "RF_WD_LSU"))) )
(Root (Eq (Var "RV32E") ((Var "bvneg") (Var "RV32E"))) )
(Root ((Var "bvule") (Var "ALU_SLL") ((Var "bvmul") (Var "ALU_SLL") (Var "ALU_SLL"))) )

(rule
 ((Not ?a))
 ((False ?a)))

(rule
  ((= ?c (And ?a ?b))
   (False ?a))
  ((False ?c)))

(rule 
 ((= ?c (Not ?a))
  (False ?a))
 ((True ?c)))

(rule
 ((Root (Not ?a)))
 ((False ?a)))

(rule
 ((True (Not ?a)))
 ((False ?a)))

(rule 
 ((True (And ?a ?b)))
 ((True ?a) (True ?b)))

(rule
 ((Root ?a))
 ((True ?a)))

(rule
 ((Or ?a ?b)
  (False ?a))
 ((True ?b)))

(rule
 ((Eq ?a ?b)
  (False ?a))
 ((False ?b)))

(rule
 ((Eq ?a ?b)
  (True ?a))
 ((True ?b)))

(rule
 ((True (Eq ?a (And ?a ?b)))
  (True ?a))
 ((True ?b)))

(rule
 ((= ?c (Eq ?a (Or ?a ?b)))
  (True ?c))
 ((union ?a ?c)))

(rule
 ((False ?a)
  (= ?c (And ?a ?b)))
 ((False ?c)))

(rule
 ((True ?a)
  (= ?c (Or ?a ?b)))
 ((True ?c)))

(rule
 ((True ?a)
  (= ?c (Not ?a)))
 ((False ?c)))

(rule
 ((False ?a)
  (= ?c (Not ?a)))
 ((True ?c)))

(rule 
 ((= ?c (And ?a ?b))
  (Root ?c)
  (True ?a))
 ((union ?c ?b)))

(rule
 ((= ?c (Or ?a ?b))
  (Root ?c)
  (False ?a))
 ((union ?c ?b)))

(rule
 ((= ?c (Eq ?a ?b))
  (Root ?c)
  (True ?a))
 ((union ?c ?b)))

(rewrite (Or ?a ?b) (Or ?b ?a))
(rewrite (And ?a ?b) (And ?b ?a))
(rewrite (Eq ?a ?b) (Eq ?b ?a))

;(print "Sizes before running:")
(print-size Root)
(print-size True)
(print-size False)

(run 20)

(print-size Root)
(print-size True)
(print-size False)
