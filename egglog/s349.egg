(datatype Expr
	(Var String) 
    (Bool bool)
    (Not Expr)
    (And Expr Expr)
    (Or Expr Expr)
    (Eq Expr Expr))

(relation Root (Expr))
(relation True (Expr))
(relation False (Expr))

(Root (Eq (Var "AMVS0N") (Var "SMVG5VS0P")) )
(Root (Eq (Var "CNTVG1VQN") (Var "IINIIT")) )
(Root (Eq (Var "P4") (Var "SMVG4VG1VAD1NF")) )
(Root (Eq (Var "ADDVG4VCNVOR1NF") (Var "P3")) )
(Root (Eq (Var "AMVG3VG1VAD1NF") (Var "MRVQN0")) )
(Root (Not (Var "SMVG5VG1VAD2NF")) )
(Root (Eq (Var "AMVS0N") (Var "CT2")) )
(Root (Not (Var "ADDVG2VCNVAD4NF")) )
(Root (Eq (Var "P3") (Var "SM0")) )
(Root (Var "AD0N") )
(Root (Eq (Var "ADDVG1VP") (Var "CT0")) )
(Root (Or (Var "ADDVG4VCNVOR1NF") (Var "MRVQN1")) )
(Root (Not (And (Var "AMVG4VG1VAD2NF") (Var "AX1"))) )
(Root (Not (Var "ADDVG3VCNVAD2NF")) )
(Root (Eq (Var "ADDVG4VCNVOR1NF") (Var "AMVG3VS0P")) )
(Root (Eq (Var "CNTVCON2") (Var "S2")) )
(Root (Eq (Var "SMVG2VS0P") (Var "SMVG3VS0P")) )
(Root (Or (Var "ACVQN2") (Var "P4")) )
(Root (Not (Var "MRVG4VDVAD1NF")) )
(Root (Not (And (Var "CK") (Var "SMVG3VX"))) )
(Root (Not (And (Var "AMVG2VX") (Var "SMVG5VS0P"))) )
(Root (Eq (Var "ACVQN2") (Var "AX3")) )
(Root (Eq (Var "CNTVG1VQN") (Var "SM2")) )
(Root (Eq (Var "CNTVG2VQN") (Var "P0")) )
(Root (Not (Var "BMVG5VG1VAD1NF")) )
(Root (Eq (Var "AMVG2VS0P") (Var "SMVG2VG1VAD1NF")) )
(Root (Or (Var "ACVG3VD1") (Var "CNTVG2VZ1")) )
(Root (Or (Var "ACVG2VD1") (Var "P6")) )
(Root (Or (Var "MRVG1VD") (Not (Var "MRVQN1"))) )
(Root (Eq (Var "ACVQN3") (Var "ADDVG1VP")) )
(Root (Var "AD1N") )
(Root (Or (Var "AM2") (Var "CNTVG3VQN")) )
(Root (Not (Var "ADDVC2")) )
(Root (Var "AD2N") )
(Root (Eq (Var "ADDVG2VCNVOR1NF") (Var "SM1")) )
(Root (Not (Eq (Var "ADDVG2VSN") (Var "CT1N"))) )
(Root (Not (Var "ADDVG4VCNVAD1NF")) )
(Root (Not (Eq (Var "AMVG3VG1VAD1NF") (Var "P6"))) )
(Root (Eq (Var "ADDVG3VCNVOR2NF") (Var "IINIIT")) )
(Root (Eq (Var "ACVQN2") (Var "AMVG2VG1VAD1NF")) )
(Root (Eq (Var "AMVG5VG1VAD1NF") (Var "CNTVG1VZ")) )
(Root (Var "READYN") )
(Root (Or (Var "ACVG3VD1") (Var "AMVG2VS0P")) )
(Root (Eq (Var "ADDVG3VCNVOR1NF") (Var "CNTVG1VZ1")) )
(Root (Not (Eq (Var "AMVG3VS0P") (Var "AMVG5VG1VAD1NF"))) )
(Root (Not (Var "ADDVG3VCNVAD4NF")) )
(Root (Eq (Var "AX0") (Var "CNTVG2VD1")) )
(Root (Not (Var "CO")) )
(Root (Eq (Var "ADDVG3VSN") (Var "CT0")) )
(Root (Not (And (Var "AMVG2VG1VAD2NF") (Var "SMVG4VX"))) )
(Root (Eq (Var "AMVG3VS0P") (Var "CNTVCON0")) )
(Root (Eq (Var "AMVG5VG1VAD2NF") (And (Var "AMVG5VG1VAD2NF") (Var "P0"))) )
(Root (Or (Var "ACVG1VD1") (Var "CNTVG2VZ1")) )
(Root (Not (Eq (Var "CT1") (Var "MRVSHLDN"))) )
(Root (Eq (Var "ACVQN3") (Var "CNTVG3VD1")) )
(Root (Var "CNTVG1VD1") )
(Root (Eq (Var "ADDVG2VCNVAD3NF") (Var "IINIIT")) )
(Root (Eq (Var "ADDVG1VP") (Var "AMVG3VG1VAD1NF")) )
(Root (Not (And (Var "AMVG5VG1VAD2NF") (Var "AMVS0N"))) )
(Root (Var "CNTVG1VG2VOR1NF") )
(Root (Eq (Var "ADDVG3VCNVOR1NF") (Var "SMVG3VG1VAD1NF")) )
(Root (Eq (Var "CNTVCO1") (Var "SMVG4VS0P")) )
(Root (Not (Var "MRVG1VDVAD1NF")) )
(Root (Var "ADDVG1VCN") )
(Root (Eq (Var "AMVS0N") (Var "AX0")) )
(Root (Or (Var "AM0") (Var "P5")) )
(Root (Not (Eq (Var "AMVS0N") (Var "P7"))) )
(Root (Or (Var "ACVG2VD1") (Var "S2")) )
(Root (Not (And (Var "AMVG4VX") (Var "CT0"))) )
(Root (Eq (Var "ADDVG4VCNVOR2NF") (Var "S0")) )
(Root (Eq (Var "AMVG4VG1VAD1NF") (Var "AMVS0N")) )
(Root (Eq (Var "AMVG3VS0P") (Var "S2")) )
(Root (Eq (Var "CNTVG2VG2VOR1NF") (Var "SMVG2VS0P")) )
(Root (Not (Eq (Var "CNTVCON2") (Var "SMVG3VS0P"))) )
(Root (Eq (Var "ADDVG2VCNVOR2NF") (Var "CNTVG1VQN")) )
(Root (Eq (Var "ADDVG3VSN") (Var "CNTVCO1")) )
(Root (Or (Var "MRVG3VD") (Var "SMVG5VG1VAD1NF")) )
(Root (Not (Eq (Var "AMVG2VS0P") (Var "SMVG5VS0P"))) )
(Root (Eq (Var "AMVG5VS0P") (Var "SMVG5VG1VAD1NF")) )
(Root (Not (Var "ADDVG4VCNVAD4NF")) )
(Root (Eq (Var "ADDVG2VCNVOR1NF") (Var "AMVG3VS0P")) )
(Root (Not (Eq (Var "AMVG2VG1VAD1NF") (Var "AMVG2VS0P"))) )
(Root (Eq (Var "P0") (Var "P5")) )
(Root (Eq (Var "AMVG4VG1VAD1NF") (Var "MRVQN1")) )
(Root (Eq (Var "ADDVG2VCNVAD3NF") (Var "ADDVG4VCNVOR2NF")) )
(Root (Eq (Var "ADDVG1VP") (Var "CNTVG1VZ")) )
(Root (Eq (Var "ADDVG4VCNVOR2NF") (Var "CNTVCON0")) )
(Root (Eq (Var "SMVG3VX") (Var "SMVG5VX")) )
(Root (Var "BMVG5VS0P") )
(Root (Not (Eq (Var "ADDVG2VCNVOR2NF") (Var "AX2"))) )
(Root (Eq (Var "CT1N") (Var "P7")) )
(Root (Var "AD3N") )
(Root (Eq (Var "AMVG5VS0P") (Var "S3")) )
(Root (Eq (Var "S0") (Var "S3")) )
(Root (Not (Var "CNTVG2VD")) )
(Root (Eq (Var "CNTVG3VQN") (Var "SMVG5VG1VAD1NF")) )
(Root (Eq (Var "ADDVG3VCNVOR2NF") (Var "AMVG3VS0P")) )
(Root (Or (Var "AX0") (Var "P3")) )
(Root (Not (Eq (Var "AM2") (Var "AMVG4VX"))) )
(Root (Eq (Var "ADDVG3VCNVOR1NF") (Var "CNTVCON2")) )
(Root (Or (Var "ACVG3VD1") (Var "P2")) )
(Root (Not (Var "SMVG4VG1VAD2NF")) )
(Root (Eq (Var "P1") (Var "P6")) )
(Root (Eq (Var "ADDVG3VCNVOR1NF") (Var "S2")) )
(Root (Eq (Var "P3") (Var "SMVG2VG1VAD1NF")) )
(Root (Not (Var "AD0")) )
(Root (Not (Var "AD3")) )
(Root (Eq (Var "AX2") (Var "CNTVG2VD1")) )
(Root (Eq (Var "CNTVG2VQN") (Var "P4")) )
(Root (Not (And (Var "AMVG2VX") (Var "CT1"))) )
(Root (Or (Var "AMVG2VG1VAD1NF") (Var "SMVG5VG1VAD1NF")) )
(Root (Not (Var "AD2")) )
(Root (Or (Var "ADDVG3VCNVOR1NF") (Not (Var "AMVG3VG1VAD2NF"))) )
(Root (Eq (Var "AMVG2VG1VAD1NF") (Var "CNTVCO0")) )
(Root (Not (And (Var "AMVG2VX") (Var "MRVQN2"))) )
(Root (Not (Var "SMVG3VG1VAD2NF")) )
(Root (Not (Var "ADDVG2VCNVAD1NF")) )
(Root (Var "BMVG2VS0P") )
(Root (Eq (Var "P6") (Var "SMVG4VG1VAD1NF")) )
(Root (Eq (Var "AMVG5VG1VAD1NF") (Var "CT1")) )
(Root (Eq (Var "P0") (Var "SMVG5VG1VAD1NF")) )
(Root (Eq (Var "ADDVG1VPVOR1NF") (Var "P3")) )
(Root (Eq (Var "ADDVG4VCNVOR1NF") (Var "CNTVG2VQN")) )
(Root (Not (Eq (Var "AMVG5VS0P") (Var "SMVG5VX"))) )
(Root (Var "CNTVG2VZ") )
(Root (Not (Var "SMVG2VG1VAD2NF")) )
(Root (Not (Var "BMVG2VG1VAD1NF")) )
(Root (Or (Var "ADDVG4VSN") (Var "SM3")) )
(Root (Eq (Var "AMVG5VG1VAD1NF") (Var "MRVQN3")) )
(Root (Eq (Var "AMVG5VS0P") (Var "CNTVCON0")) )
(Root (Eq (Var "CNTVCON2") (Var "P3")) )
(Root (Eq (Var "ADDVG3VCNVOR1NF") (Var "CNTVG1VQN")) )
(Root (Eq (Var "ADDVG1VP") (Var "AMVS0N")) )
(Root (Not (Var "BMVG3VG1VAD1NF")) )
(Root (Or (Var "ACVQN0") (Var "CNTVG3VZ1")) )
(Root (Not (Var "BMVS0N")) )
(Root (Eq (Var "CNTVG2VZ1") (Var "SMVS0N")) )
(Root (Eq (Var "AX0") (Var "CNTVCO0")) )
(Root (Eq (Var "ADDVG4VCNVOR1NF") (Var "SMVG2VG1VAD1NF")) )
(Root (Not (Var "BMVG4VG1VAD1NF")) )
(Root (Not (Var "CNTVG3VD")) )
(Root (Eq (Var "CNTVCO0") (Var "MRVQN2")) )
(Root (Eq (Var "CNTVCO0") (Var "CT0")) )
(Root (Var "ADDVG4VCN") )
(Root (Eq (Var "ADDVG2VCNVAD3NF") (Var "CNTVG1VQN")) )
(Root (Var "ADDVG3VCN") )
(Root (Or (Var "AMVG2VG1VAD1NF") (Var "SMVG3VG1VAD1NF")) )
(Root (Not (And (Var "CK") (Var "CNTVCO2"))) )
(Root (Var "ADDVG2VCN") )
(Root (Or (Var "ADDVG1VP") (Var "S3")) )
(Root (Eq (Var "ADDVG1VPVOR1NF") (Var "SMVG3VG1VAD1NF")) )
(Root (Eq (Var "ADDVG2VCNVOR1NF") (Var "SMVG4VG1VAD1NF")) )
(Root (Not (Eq (Var "ACVQN0") (Var "CNTVG3VQN"))) )
(Root (Eq (Var "MRVQN2") (Var "MRVQN3")) )
(Root (Eq (Var "MRVSHLDN") (Var "P1")) )
(Root (Eq (Var "P5") (Var "P7")) )
(Root (Not (And (Var "AMVG3VX") (Var "SMVG5VX"))) )
(Root (Not (Eq (Var "AX0") (Var "CNTVG1VQN"))) )
(Root (Or (Var "CNTVG1VZ") (Var "S0")) )
(Root (Eq (Var "MRVSHLDN") (Var "S0")) )
(Root (Not (Eq (Var "ADDVG4VCNVOR1NF") (Var "CNTVG2VD1"))) )
(Root (Eq (Var "ADDVG2VCNVAD3NF") (Var "CNTVCON0")) )
(Root (Eq (Var "CNTVCON0") (Var "CNTVG3VQN")) )
(Root (Or (Var "AM1") (Var "P5")) )
(Root (Not (Var "READY")) )
(Root (Eq (Var "ADDVG2VSN") (Var "CNTVG2VD1")) )
(Root (Eq (Var "B2") (Var "BM2")) )
(Root (Eq (Var "ACVQN3") (Var "ADDVG2VSN")) )
(Root (Not (Var "ADDVG2VCNVAD2NF")) )
(Root (Eq (Var "ADDVG4VCNVOR2NF") (Var "P2")) )
(Root (Not (Var "ADDVC3")) )
(Root (Eq (Var "ACVQN2") (Var "CNTVCO2")) )
(Root (Eq (Var "ADDVG2VCNVAD3NF") (Var "SMVG2VG1VAD1NF")) )
(Root (Not (Eq (Var "AX0") (Var "CNTVCON2"))) )
(Root (Eq (Var "ADDVG1VPVOR1NF") (Var "ADDVG3VCNVOR2NF")) )
(Root (Not (Var "MRVG2VDVAD1NF")) )
(Root (Or (Var "CNTVG2VD1") (Var "S3")) )
(Root (Not (Var "ADDVG3VCNVAD1NF")) )
(Root (Eq (Var "S0") (Var "SM3")) )
(Root (Eq (Var "AMVG2VG1VAD1NF") (Var "SMVG5VS0P")) )
(Root (Or (Var "ADDVG3VCNVAD3NF") (Not (Var "MRVG4VDVAD2NF"))) )
(Root (Eq (Var "AX3") (Var "CNTVG1VZ")) )
(Root (Or (Var "AM2") (Not (Var "CNTVG2VD1"))) )
(Root (Not (Eq (Var "ADDVG4VCNVAD3NF") (Var "AMVG5VG1VAD1NF"))) )
(Root (Not (Var "ADDVG4VCNVAD2NF")) )
(Root (Eq (Var "AMVG4VG1VAD1NF") (Var "CNTVG2VD1")) )
(Root (Not (Var "AD1")) )
(Root (Eq (Var "CNTVG1VD") (And (Var "CNTVG1VD") (Var "SM0"))) )
(Root (Or (Var "ADDVG4VCNVOR1NF") (Var "CNTVG2VD1")) )
(Root (Not (And (Var "AMVG5VX") (Var "CNTVG1VZ"))) )
(Root (Eq (Var "ADDVG4VSN") (Var "CT1")) )
(Root (Eq (Var "ADDVG1VPVOR1NF") (Var "CNTVG2VZ1")) )
(Root (Not (Var "ADDVC1")) )
(Root (Eq (Var "CNTVCON1") (Var "P2")) )
(Root (Not (Var "MRVG3VDVAD1NF")) )
(Root (Var "BMVG3VS0P") )
(Root (Or (Var "ACVQN1") (Var "SM1")) )
(Root (Var "CNTVG3VZ") )
(Root (Not (Eq (Var "AMVG4VG1VAD1NF") (Var "SMVG3VG1VAD1NF"))) )
(Root (Eq (Var "CNTVCO1") (Var "SMVG3VX")) )
(Root (Eq (Var "ADSH") (Var "SMVG2VS0P")) )
(Root (Or (Var "ADDVG1VPVOR1NF") (Var "CT1")) )
(Root (Or (Var "ACVG4VD1") (Var "CNTVG3VQN")) )

(rule
 ((Not ?a))
 ((False ?a)))

(rule
  ((= ?c (And ?a ?b))
   (False ?a))
  ((False ?c)))

(rule 
 ((= ?c (Not ?a))
  (False ?a))
 ((True ?c)))

(rule
 ((Root (Not ?a)))
 ((False ?a)))

(rule
 ((True (Not ?a)))
 ((False ?a)))

(rule 
 ((True (And ?a ?b)))
 ((True ?a) (True ?b)))

(rule
 ((Root ?a))
 ((True ?a)))

(rule
 ((Or ?a ?b)
  (False ?a))
 ((True ?b)))

(rule
 ((Eq ?a ?b)
  (False ?a))
 ((False ?b)))

(rule
 ((Eq ?a ?b)
  (True ?a))
 ((True ?b)))

(rule
 ((True (Eq ?a (And ?a ?b)))
  (True ?a))
 ((True ?b)))

(rule
 ((= ?c (Eq ?a (Or ?a ?b)))
  (True ?c))
 ((union ?a ?c)))

(rule
 ((False ?a)
  (= ?c (And ?a ?b)))
 ((False ?c)))

(rule
 ((True ?a)
  (= ?c (Or ?a ?b)))
 ((True ?c)))

(rule
 ((True ?a)
  (= ?c (Not ?a)))
 ((False ?c)))

(rule
 ((False ?a)
  (= ?c (Not ?a)))
 ((True ?c)))

(rule 
 ((= ?c (And ?a ?b))
  (Root ?c)
  (True ?a))
 ((union ?c ?b)))

(rule
 ((= ?c (Or ?a ?b))
  (Root ?c)
  (False ?a))
 ((union ?c ?b)))

(rule
 ((= ?c (Eq ?a ?b))
  (Root ?c)
  (True ?a))
 ((union ?c ?b)))

(rewrite (Or ?a ?b) (Or ?b ?a))
(rewrite (And ?a ?b) (And ?b ?a))
(rewrite (Eq ?a ?b) (Eq ?b ?a))

;(print "Sizes before running:")
(print-size Root)
(print-size True)
(print-size False)

(run 20)

(print-size Root)
(print-size True)
(print-size False)
