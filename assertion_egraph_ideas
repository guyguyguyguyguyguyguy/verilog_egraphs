Given a new assertion:
1. Generate the node for the assertion
2. Check if node in EGraph
  a) If yes, check if it has been checked (by meta-data)
     - If yes, continue to next assertion
     - If no, change checked to true and return assertion
  b) Otherwise:
2. Generate nodes for each implication the assertion makes (can we do this in a general way? Can we use rewrites to ensure we cover all implications?)
3. Rewrite the saturation
4. Check if the node has been rewritten to something in EGraph (return to 2. we know node in EGraph so won't get to otherwise branch)

For example, given A and B:
- We generate A and B (assume not in EGraph) 
  => Implicitly generate 'A' and 'B'
  => In 'make' method, we generate all nodes implied by this (in this case A and B) and mark them as checked
  [if not already present and not already checked]
  => rewrite
  => Check if A and B ends up in a checked class
  => proceed accordingly

For example, A and B => C
- Generate node for this
  => Implicitly generate A, B, C
  => In make method generate C and mark as checked/covered
  => rewrite
  => Check if A and B => C in covered class
  => proceed accordingly


What if A and B => C and D
- Would want make method to generate C, D and (C and D) and mark all as covered




Maybe EGraph special 'covered' class 

Given some assertion, A and B => C and D
We have rewrite rules such as:
?a => ?c:  ?c -> 'covered'
?a and ?b: ?a -> 'covered', ?b -> 'covered'

Given A and B => C and D
you would get that C and D -> 'coverd'
and then C -> 'covered'  and D -> 'covered'

Can do this with custom applier


struct Converage {
  vars: [Var]
 } 

 impl Applier for Coverage 
   fn apply_one(subst, ...) 
    for v in vars:
      for v in var:
	id = subst[v];
	egraph.union(id, covered_id)
